import React, { useState, useEffect } from 'react';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';
import {
  Alert,
  Button,
  Card,
  CardContent,
  Grid,
  Snackbar,
  TextField,
  Select,
  Box,
  MenuItem,
} from '@mui/material';
import {
  useForm,
  Resolver,
  Controller,
  useFieldArray,
  SubmitHandler,
} from 'react-hook-form';
import axios from 'axios';
import { useAppDispatch } from '../redux/hooks';
import { GET_CURRENT_USER } from '../redux/store';
import { UNITS } from '../utils/CONSTANTS';
import { Ingredient } from '../models/ingredient';
import { Recipe } from '../models/recipe';

type Props = {
  defaultValues: Recipe;
  title: string;
};

function RecipeCreateForm({ defaultValues, title }: Props) {
  const resolver: Resolver<Recipe> = async (values: Recipe) => {
    return {
      values: values.name ? values : {},
      errors: !values.name
        ? { name: { type: 'required', message: 'Name is required' } }
        : {},
    };
  };

  const dispatch = useAppDispatch();

  const { control, handleSubmit, reset } = useForm<Recipe>({
    resolver,
    defaultValues,
  });
  const { fields, append, remove } = useFieldArray({
    name: 'ingredients',
    control,
  });
  const [displaySnackbar, setOpenSnackbar] = useState(false);
  const [sendSuccess, setSendSuccess] = useState(false);
  const [ingredientCount, setIngredientCount] = useState(
    defaultValues?.ingredients?.length || 1
  );

  //hello
  // const resetForm = () => {
  //   //set number of ingredients to correct length
  //   console.debug("ingredientCount: ", ingredientCount);
  //   console.debug("default length: ", defaultValues?.ingredients?.length);
  //   setIngredientCount(1);
  //   console.debug("ingredientCount: ", ingredientCount);
  //   reset();
  // };

  const onSubmit: SubmitHandler<Recipe> = async (data) => {
    //clean ingredients and instructions lists to be [String]
    console.debug('SUBMITTED DATA FROM FORM: ', data);
    // const instructions = data.instructions
    //   .split("\n")
    //   .filter((str: string) => str !== "");
    // const newRecipe = {
    //   name: data.name,
    //   ingredients: data.ingredients,
    //   instructions: data.instructions,
    //   _id: defaultValues?._id,
    // };
    // const res = await axios.post("/api/recipe", newRecipe);
    // dispatch({ type: GET_CURRENT_USER, payload: res.data });
    // if (res.status === 200) {
    //   setSendSuccess(true);
    // } else {
    //   setSendSuccess(false);
    // }
    // setOpenSnackbar(true);
    // if (title.toUpperCase() === "CREATE") {
    //   reset();
    // }
  };

  useEffect(() => {
    if (defaultValues?.ingredients?.length > fields.length) {
      defaultValues?.ingredients?.forEach(() => {
        append({ name: 'test', quantity: 1, unit: '' } as Ingredient);
      });
      remove(-1); //removes the extra empty ingredient generated by above for loop
    }
    if (ingredientCount > fields.length) {
      append({ name: 'test', quantity: 1, unit: '' } as Ingredient);
    }
    console.debug('after', fields.length);
  }, [ingredientCount, defaultValues]);

  return (
    <>
      <Card raised>
        <CardContent>
          <h2>{title} a Recipe</h2>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Grid container rowSpacing={2} columnSpacing={{ xs: 1, sm: 2 }}>
              <Grid item xs={12}>
                <h4>Recipe Name</h4>
                <Controller
                  name='name'
                  control={control}
                  defaultValue={defaultValues?.name}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      placeholder='Enter recipe name'
                      variant='outlined'
                      sx={{ width: '100%' }}
                      required
                    />
                  )}
                />
              </Grid>

              <Grid
                container
                item
                rowSpacing={2}
                columnSpacing={{ xs: 1, sm: 2 }}>
                <Grid item xs={12}>
                  <Box
                    sx={{ display: 'flex', justifyContent: 'space-between' }}>
                    <h4>Ingredients</h4>
                    <Button
                      variant='contained'
                      color='success'
                      sx={{
                        height: '24px',
                        width: '24px',
                      }}
                      onClick={() => {
                        console.log('add ingredient');
                        //setIngredientCount(ingredientCount + 1);
                      }}>
                      <AddIcon />
                    </Button>
                  </Box>
                </Grid>

                {fields.map((item, i) => (
                  // key must be item.id and remove must use i
                  //in order to properly remove the ingredient from the list
                  <React.Fragment key={item.id}>
                    <Controller
                      name='ingredients'
                      control={control}
                      render={({ field }) => (
                        <Grid item xs={12}>
                          <Grid item xs={3} sm={2}>
                            <TextField
                              {...field}
                              type='number'
                              placeholder='Enter quantity'
                              value={
                                field.value[i]?.quantity?.toString() ?? '0'
                              }
                              variant='outlined'
                              sx={{ width: '100%' }}
                            />
                          </Grid>
                          <Grid item xs={3} sm={2}>
                            <Select
                              {...field}
                              sx={{ width: '100%' }}
                              value={field.value[i]?.unit ?? ''}>
                              {UNITS.map(({ label }) => (
                                <MenuItem key={label} value={label}>
                                  {label}
                                </MenuItem>
                              ))}
                            </Select>
                          </Grid>

                          <Grid item xs={12} sm={7}>
                            <TextField
                              {...field}
                              placeholder='Enter name'
                              value={field.value[i]?.name ?? ''}
                              variant='outlined'
                              sx={{ width: '100%' }}
                              required
                            />
                          </Grid>
                        </Grid>
                      )}
                    />
                    <Grid item xs={3} sm={1}>
                      <Button
                        onClick={() => remove(i)}
                        variant='outlined'
                        color='error'
                        sx={{ marginTop: '0.75em' }}>
                        <DeleteIcon />
                      </Button>
                    </Grid>
                  </React.Fragment>
                ))}
              </Grid>

              <Grid item xs={12}>
                <h4>Instructions</h4>
                <Controller
                  name='instructions'
                  control={control}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      placeholder='Enter instructions'
                      variant='outlined'
                      sx={{ width: '100%' }}
                      multiline
                      minRows={5}
                      required
                    />
                  )}
                />
              </Grid>
              <Grid item xs={12}>
                {/* <Button variant="outlined" color="warning" onClick={resetForm}>
                  Reset
                </Button> */}
                <Button variant='contained' color='success' type='submit'>
                  Confirm
                </Button>
              </Grid>
            </Grid>
          </form>
        </CardContent>
      </Card>
      <Snackbar
        open={displaySnackbar}
        autoHideDuration={4000}
        onClose={() => setOpenSnackbar(false)}>
        {sendSuccess ? (
          <Alert
            onClose={() => setOpenSnackbar(false)}
            severity='success'
            sx={{ width: '100%' }}>
            Recipe successfully saved
          </Alert>
        ) : (
          <Alert
            onClose={() => setOpenSnackbar(false)}
            severity='error'
            sx={{ width: '100%' }}>
            Error saving recipe!
          </Alert>
        )}
      </Snackbar>
    </>
  );
}

export default RecipeCreateForm;

/*******************************************
 * TEAR ALL THE MATERIAL OUT
 ************************************************/
